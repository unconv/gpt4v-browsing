{
    "summary": "The code initializes an OpenAI model, retrieves user questions from website images, prompts an AI chatbot for answers, manages inputs, and returns \"ANSWER_NOT_FOUND\" if no answer is found.",
    "details": [
        {
            "comment": "This code initializes an OpenAI model, sets a timeout, defines a function to encode images in base64, prompts the user for input, and creates a list of messages for a chat completion request. It then enters a loop where it repeatedly makes a chat completion request to the OpenAI API using the provided messages and generates a response in JSON format containing a URL as the output.",
            "location": "\"/media/root/Toshiba XG3/works/gpt4v-browsing/docs/src/vision_crawl.py\":0-38",
            "content": "from openai import OpenAI\nimport subprocess\nimport base64\nimport json\nimport os\nmodel = OpenAI()\nmodel.timeout = 10\ndef image_b64(image):\n    with open(image, \"rb\") as f:\n        return base64.b64encode(f.read()).decode()\nprompt = input(\"You: \")\nmessages = [\n    {\n        \"role\": \"system\",\n        \"content\": \"You are a web crawler. Your job is to give the user a URL to go to in order to find the answer to the question. Go to a direct URL that will likely have the answer to the user's question. Respond in the following JSON fromat: {\\\"url\\\": \\\"<put url here>\\\"}\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": prompt,\n    }\n]\nwhile True:\n    while True:\n        response = model.chat.completions.create(\n            model=\"gpt-3.5-turbo-1106\",\n            messages=messages,\n            max_tokens=1024,\n            response_format={\"type\": \"json_object\"},\n            seed=2232,\n        )\n        message = response.choices[0].message\n        message_json = json.loads(message.content)\n        url = message_json[\"url\"]"
        },
        {
            "comment": "Code is crawling a website, taking a screenshot, and passing it to the GPT-4 vision model for previewing based on user's question. If the screenshot fails to capture, it prompts the user to try a different URL.",
            "location": "\"/media/root/Toshiba XG3/works/gpt4v-browsing/docs/src/vision_crawl.py\":40-75",
            "content": "        messages.append({\n            \"role\": \"assistant\",\n            \"content\": message.content,\n        })\n        print(f\"Crawling {url}\")\n        if os.path.exists(\"screenshot.jpg\"):\n            os.remove(\"screenshot.jpg\")\n        result = subprocess.run(\n            [\"node\", \"screenshot.js\", url],\n            capture_output=True,\n            text=True\n        )\n        exitcode = result.returncode\n        output = result.stdout\n        if not os.path.exists(\"screenshot.jpg\"):\n            print(\"ERROR: Trying different URL\")\n            messages.append({\n                \"role\": \"user\",\n                \"content\": \"I was unable to crawl that site. Please pick a different one.\"\n            })\n        else:\n            break\n    b64_image = image_b64(\"screenshot.jpg\")\n    response = model.chat.completions.create(\n        model=\"gpt-4-vision-preview\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"Your job is to answer the user's question based on the given screensh"
        },
        {
            "comment": "Code snippet retrieves a user's question from a website screenshot or image and prompts an AI chatbot to provide an answer. If the chatbot cannot find an answer, it responds with \"ANSWER_NOT_FOUND\".",
            "location": "\"/media/root/Toshiba XG3/works/gpt4v-browsing/docs/src/vision_crawl.py\":75-102",
            "content": "ot of a website. Answer the user as an assistant, but don't tell that the information is from a screenshot or an image. Pretend it is information that you know. If you can't answer the question, simply respond with the code `ANSWER_NOT_FOUND` and nothing else.\",\n            }\n        ] + messages[1:] + [\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\n                        \"type\": \"image_url\",\n                        \"image_url\": f\"data:image/jpeg;base64,{b64_image}\",\n                    },\n                    {\n                        \"type\": \"text\",\n                        \"text\": prompt,\n                    }\n                ]\n            }\n        ],\n        max_tokens=1024,\n    )\n    message = response.choices[0].message\n    message_text = message.content\n    if \"ANSWER_NOT_FOUND\" in message_text:\n        print(\"ERROR: Answer not found\")\n        messages.append({\n            \"role\": \"user\",\n            \"content\": \"I was unable to find the answer on that website. Please pick another one\""
        },
        {
            "comment": "If AI response received, append message to \"messages\" list as user input. If not, print AI's message and prompt user for input, then append to \"messages\" with role \"user\".",
            "location": "\"/media/root/Toshiba XG3/works/gpt4v-browsing/docs/src/vision_crawl.py\":103-110",
            "content": "        })\n    else:\n        print(f\"GPT: {message_text}\")\n        prompt = input(\"\\nYou: \")\n        messages.append({\n            \"role\": \"user\",\n            \"content\": prompt,\n        })"
        }
    ]
}